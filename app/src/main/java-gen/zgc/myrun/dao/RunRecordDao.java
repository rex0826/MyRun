package zgc.myrun.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import zgc.myrun.bean.RunRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RUN_RECORD".
*/
public class RunRecordDao extends AbstractDao<RunRecord, Long> {

    public static final String TABLENAME = "RUN_RECORD";

    /**
     * Properties of entity RunRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property LonginName = new Property(1, String.class, "LonginName", false, "LONGIN_NAME");
        public final static Property RunDate = new Property(2, java.util.Date.class, "RunDate", false, "RUN_DATE");
        public final static Property StartTime = new Property(3, java.util.Date.class, "StartTime", false, "START_TIME");
        public final static Property EndTime = new Property(4, java.util.Date.class, "EndTime", false, "END_TIME");
        public final static Property StepNumber = new Property(5, Long.class, "StepNumber", false, "STEP_NUMBER");
        public final static Property StepFrequercy = new Property(6, Long.class, "StepFrequercy", false, "STEP_FREQUERCY");
        public final static Property RunDistance = new Property(7, Float.class, "RunDistance", false, "RUN_DISTANCE");
        public final static Property RunShoes = new Property(8, String.class, "RunShoes", false, "RUN_SHOES");
        public final static Property AverageSpeed = new Property(9, Float.class, "AverageSpeed", false, "AVERAGE_SPEED");
        public final static Property FastestSpeed = new Property(10, Float.class, "FastestSpeed", false, "FASTEST_SPEED");
        public final static Property SlowestSpeed = new Property(11, Float.class, "SlowestSpeed", false, "SLOWEST_SPEED");
    };


    public RunRecordDao(DaoConfig config) {
        super(config);
    }
    
    public RunRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RUN_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"LONGIN_NAME\" TEXT NOT NULL ," + // 1: LonginName
                "\"RUN_DATE\" INTEGER NOT NULL ," + // 2: RunDate
                "\"START_TIME\" INTEGER," + // 3: StartTime
                "\"END_TIME\" INTEGER," + // 4: EndTime
                "\"STEP_NUMBER\" INTEGER," + // 5: StepNumber
                "\"STEP_FREQUERCY\" INTEGER," + // 6: StepFrequercy
                "\"RUN_DISTANCE\" REAL," + // 7: RunDistance
                "\"RUN_SHOES\" TEXT," + // 8: RunShoes
                "\"AVERAGE_SPEED\" REAL," + // 9: AverageSpeed
                "\"FASTEST_SPEED\" REAL," + // 10: FastestSpeed
                "\"SLOWEST_SPEED\" REAL);"); // 11: SlowestSpeed
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RUN_RECORD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RunRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getLonginName());
        stmt.bindLong(3, entity.getRunDate().getTime());
 
        java.util.Date StartTime = entity.getStartTime();
        if (StartTime != null) {
            stmt.bindLong(4, StartTime.getTime());
        }
 
        java.util.Date EndTime = entity.getEndTime();
        if (EndTime != null) {
            stmt.bindLong(5, EndTime.getTime());
        }
 
        Long StepNumber = entity.getStepNumber();
        if (StepNumber != null) {
            stmt.bindLong(6, StepNumber);
        }
 
        Long StepFrequercy = entity.getStepFrequercy();
        if (StepFrequercy != null) {
            stmt.bindLong(7, StepFrequercy);
        }
 
        Float RunDistance = entity.getRunDistance();
        if (RunDistance != null) {
            stmt.bindDouble(8, RunDistance);
        }
 
        String RunShoes = entity.getRunShoes();
        if (RunShoes != null) {
            stmt.bindString(9, RunShoes);
        }
 
        Float AverageSpeed = entity.getAverageSpeed();
        if (AverageSpeed != null) {
            stmt.bindDouble(10, AverageSpeed);
        }
 
        Float FastestSpeed = entity.getFastestSpeed();
        if (FastestSpeed != null) {
            stmt.bindDouble(11, FastestSpeed);
        }
 
        Float SlowestSpeed = entity.getSlowestSpeed();
        if (SlowestSpeed != null) {
            stmt.bindDouble(12, SlowestSpeed);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public RunRecord readEntity(Cursor cursor, int offset) {
        RunRecord entity = new RunRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // LonginName
            new java.util.Date(cursor.getLong(offset + 2)), // RunDate
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // StartTime
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // EndTime
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // StepNumber
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // StepFrequercy
            cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7), // RunDistance
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // RunShoes
            cursor.isNull(offset + 9) ? null : cursor.getFloat(offset + 9), // AverageSpeed
            cursor.isNull(offset + 10) ? null : cursor.getFloat(offset + 10), // FastestSpeed
            cursor.isNull(offset + 11) ? null : cursor.getFloat(offset + 11) // SlowestSpeed
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RunRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLonginName(cursor.getString(offset + 1));
        entity.setRunDate(new java.util.Date(cursor.getLong(offset + 2)));
        entity.setStartTime(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setEndTime(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setStepNumber(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setStepFrequercy(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setRunDistance(cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7));
        entity.setRunShoes(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAverageSpeed(cursor.isNull(offset + 9) ? null : cursor.getFloat(offset + 9));
        entity.setFastestSpeed(cursor.isNull(offset + 10) ? null : cursor.getFloat(offset + 10));
        entity.setSlowestSpeed(cursor.isNull(offset + 11) ? null : cursor.getFloat(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(RunRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(RunRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
