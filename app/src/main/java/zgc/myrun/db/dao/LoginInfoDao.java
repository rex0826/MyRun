package zgc.myrun.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import zgc.myrun.db.DaoSession;
import zgc.myrun.db.bean.LoginInfo;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOGIN_INFO".
*/
public class LoginInfoDao extends AbstractDao<LoginInfo, Long> {

    public static final String TABLENAME = "LOGIN_INFO";

    /**
     * Properties of entity LoginInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Phone = new Property(1, String.class, "Phone", false, "PHONE");
        public final static Property NickName = new Property(2, String.class, "NickName", false, "NICK_NAME");
        public final static Property Password = new Property(3, String.class, "Password", false, "PASSWORD");
        public final static Property Birthday = new Property(4, java.util.Date.class, "Birthday", false, "BIRTHDAY");
        public final static Property Sex = new Property(5, String.class, "Sex", false, "SEX");
    };


    public LoginInfoDao(DaoConfig config) {
        super(config);
    }
    
    public LoginInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOGIN_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PHONE\" TEXT NOT NULL ," + // 1: Phone
                "\"NICK_NAME\" TEXT NOT NULL ," + // 2: NickName
                "\"PASSWORD\" TEXT NOT NULL ," + // 3: Password
                "\"BIRTHDAY\" INTEGER," + // 4: Birthday
                "\"SEX\" TEXT);"); // 5: Sex
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOGIN_INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LoginInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getPhone());
        stmt.bindString(3, entity.getNickName());
        stmt.bindString(4, entity.getPassword());
 
        java.util.Date Birthday = entity.getBirthday();
        if (Birthday != null) {
            stmt.bindLong(5, Birthday.getTime());
        }
 
        String Sex = entity.getSex();
        if (Sex != null) {
            stmt.bindString(6, Sex);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public LoginInfo readEntity(Cursor cursor, int offset) {
        LoginInfo entity = new LoginInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // Phone
            cursor.getString(offset + 2), // NickName
            cursor.getString(offset + 3), // Password
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // Birthday
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // Sex
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LoginInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPhone(cursor.getString(offset + 1));
        entity.setNickName(cursor.getString(offset + 2));
        entity.setPassword(cursor.getString(offset + 3));
        entity.setBirthday(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setSex(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(LoginInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(LoginInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
